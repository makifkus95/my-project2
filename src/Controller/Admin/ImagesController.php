<?php

namespace App\Controller\Admin;

use App\Entity\Admin\Images;
use App\Form\Admin\ImagesType;
use App\Repository\Admin\ImagesRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Route("/admin/images")
 */
class ImagesController extends Controller
{
    /**
     * @Route("/", name="admin_images_index", methods="GET")
     */
    public function index(ImagesRepository $imagesRepository): Response
    {
        return $this->render('admin/images/index.html.twig', ['images' => $imagesRepository->findAll()]);
    }

    /**
     * @Route("/new/{pid}", name="admin_images_new", methods="GET|POST")
     */
    public function new(Request $request,$pid,ImagesRepository $imagesRepository): Response
    {
        $imagelist = $imagesRepository->findBy(['productid' => $pid]);
        $image = new Images();
        $form = $this->createForm(ImagesType::class, $image);
        $form->handleRequest($request);

        if ($request->files->get('imagename'))
            // if ($form->isSubmitted() && $form->isValid())
        {
            $file = $request->files->get('imagename');
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            try {
                $file->move(
                    $this->getParameter('images_directory'),//services.yaml de tanimladigimiz directory
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }
            $image->setImage($fileName);
            $image->setProductid($pid);


            $em = $this->getDoctrine()->getManager();
            $em->persist($image);
            $em->flush();

            return $this->redirectToRoute('admin_images_new', array('pid' => $pid));
        }

        return $this->render('admin/images/new.html.twig', [
            'image' => $image,
            'imagelist' => $imagelist,
            'pid'=>$pid,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="admin_images_show", methods="GET")
     */
    public function show(Images $image): Response
    {
        return $this->render('admin/images/show.html.twig', ['image' => $image]);
    }

    /**
     * @Route("/{id}/edit", name="admin_images_edit", methods="GET|POST")
     */
    public function edit(Request $request, Images $image): Response
    {
        $form = $this->createForm(ImagesType::class, $image);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('admin_images_edit', ['id' => $image->getId()]);
        }

        return $this->render('admin/images/edit.html.twig', [
            'image' => $image,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}/{pid}", name="admin_images_del",methods="GET")
     */
    public function del(Request $request, Images $image,$pid): Response
    {

        $em = $this->getDoctrine()->getManager();
        $em->remove($image);
        $em->flush();


        return $this->redirectToRoute('admin_images_new', array('pid' => $pid));
    }

    /**
     * @Route("/{id}", name="admin_images_delete", methods="DELETE")
     */
    public function delete(Request $request, Images $image): Response
    {
        if ($this->isCsrfTokenValid('delete'.$image->getId(), $request->request->get('_token'))) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($image);
            $em->flush();
        }

        return $this->redirectToRoute('admin_images_index');
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
